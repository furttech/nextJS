// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

// postgresql://USER:PASSWORD@HOST:PORT/tester9000?schema=SCHEMA

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

/// ### Post Models Used for Blog Posts Content Storage

model Post {
    id        String   @id @default(cuid())
    title     String
    postDate  DateTime @db.Date
    content   String?
    image     String?
    tags      String?
    published Boolean  @default(false)

    // Annotated Relation Feilds connecting Foreign Key with Primary Key in User Model
    author   User?   @relation(fields: [authorId], references: [id])
    authorId String?
}

//// ### Account Models and Oauth Models ### ////

model User {
    id            String    @id @default(cuid())
    name          String?
    username      String?   @unique
    password      String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    posts         Post[]
    accounts      Account[]
    sessions      Session[]
    // profile       Profile[] // TODO: Integrate User Profile and Models
}

model Account {
    id                 String  @id @default(cuid())
    userId             String  @map("user_id")
    type               String
    provider           String
    providerAccountId  String  @map("provider_account_id")
    refresh_token      String?
    access_token       String?
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String?
    session_state      String?
    oauth_token_secret String?
    oauth_token        String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    id         Int      @id @default(autoincrement())
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
